{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\workspace\\\\Theme\\\\Native\\\\recipes-app-react-native\\\\src\\\\screens\\\\AboutApp\\\\AboutApp.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\n\nvar AboutApp = function (_React$Component) {\n  _inherits(AboutApp, _React$Component);\n\n  var _super = _createSuper(AboutApp);\n\n  function AboutApp() {\n    _classCallCheck(this, AboutApp);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AboutApp, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: {\n          backgroundColor: '#fff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 13\n        }\n      }, React.createElement(ScrollView, {\n        style: styles.pageContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: styles.newsTitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 25\n        }\n      }, \"Taxi CALL\")), React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }\n      }, React.createElement(Image, {\n        source: require(\"../../../assets/splash1.png\"),\n        style: styles.newsPic,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 25\n        }\n      })), React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: styles.newsContent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 25\n        }\n      }, \"Taxi CALL is made by the company of Ant. To render multiple columns, use the numColumns prop. Using this approach instead of a flexWrap layout can prevent conflicts with the item height logic. By passing extraData=selected to FlatList we make sure FlatList itself will re-render when the state changes. Without setting this prop, FlatList would not know it needs to re-render any items because it is a PureComponent and the prop comparison will not show any changes. keyExtractor tells the list to use the ids for the react keys instead of the default key property. Internal state is not preserved when content scrolls out of the render window. Make sure all your data is captured in the item data or external stores like Flux, Redux, or Relay. This is a PureComponent which means that it will not re-render if props remain shallow-equal. Make sure that everything your renderItem function depends on is passed as a prop (e.g. extraData) that is not === after updates, otherwise your UI may not update on changes. This includes the data prop and parent component state. In order to constrain memory and enable smooth scrolling, content is rendered asynchronously offscreen. This means it's possible to scroll faster than the fill rate and momentarily see blank content. This is a tradeoff that can be adjusted to suit the needs of each application, and we are working on improving it behind the scenes. By default, the list looks for a key prop on each item and uses that for the React key. Alternatively, you can provide a custom keyExtractor prop.\"))));\n    }\n  }]);\n\n  return AboutApp;\n}(React.Component);\n\nexport { AboutApp as default };\nvar styles = StyleSheet.create({\n  pageContainer: {},\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#ffffff'\n  },\n  newsTitle: {\n    color: '#4f4f4f',\n    fontSize: 18,\n    textAlign: 'left',\n    marginTop: 10,\n    marginBottom: 10,\n    fontWeight: 'bold'\n  },\n  newsPic: {\n    width: 180,\n    height: 120,\n    margin: 10\n  },\n  newsContent: {\n    margin: 10,\n    marginTop: 10,\n    flex: 1,\n    color: '#4f4f4f',\n    fontSize: 16,\n    textAlign: 'left',\n    writingDirection: 'ltr',\n    lineHeight: 20\n  }\n});","map":{"version":3,"sources":["E:/workspace/Theme/Native/recipes-app-react-native/src/screens/AboutApp/AboutApp.js"],"names":["React","AboutApp","backgroundColor","styles","pageContainer","container","newsTitle","require","newsPic","newsContent","Component","StyleSheet","create","flex","flexDirection","justifyContent","alignItems","color","fontSize","textAlign","marginTop","marginBottom","fontWeight","width","height","margin","writingDirection","lineHeight"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;IASqBC,Q;;;;;;;;;;;;;WACjB,kBAAQ;AACJ,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,eAAe,EAAE;AAAlB,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAY,QAAA,KAAK,EAAEC,MAAM,CAACC,aAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAACE,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEF,MAAM,CAACG,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,CADJ,EAKI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEH,MAAM,CAACE,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAEE,OAAO,+BAAtB;AAAuD,QAAA,KAAK,EAAEJ,MAAM,CAACK,OAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CALJ,EASI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEL,MAAM,CAACE,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEF,MAAM,CAACM,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yhDADJ,CATJ,CADJ,CADJ;AAwBH;;;;EA1BiCT,KAAK,CAACU,S;;SAAvBT,Q;AA4BrB,IAAME,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC7BR,EAAAA,aAAa,EAAE,EADc;AAI7BC,EAAAA,SAAS,EAAE;AACPQ,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,aAAa,EAAG,KAFT;AAGPC,IAAAA,cAAc,EAAE,QAHT;AAIPC,IAAAA,UAAU,EAAE,QAJL;AAKPd,IAAAA,eAAe,EAAE;AALV,GAJkB;AAW7BI,EAAAA,SAAS,EAAG;AACRW,IAAAA,KAAK,EAAG,SADA;AAERC,IAAAA,QAAQ,EAAG,EAFH;AAGRC,IAAAA,SAAS,EAAG,MAHJ;AAIRC,IAAAA,SAAS,EAAG,EAJJ;AAKRC,IAAAA,YAAY,EAAG,EALP;AAMRC,IAAAA,UAAU,EAAG;AANL,GAXiB;AAmB7Bd,EAAAA,OAAO,EAAG;AACNe,IAAAA,KAAK,EAAG,GADF;AAENC,IAAAA,MAAM,EAAG,GAFH;AAGNC,IAAAA,MAAM,EAAE;AAHF,GAnBmB;AAwB7BhB,EAAAA,WAAW,EAAG;AACVgB,IAAAA,MAAM,EAAG,EADC;AAEVL,IAAAA,SAAS,EAAG,EAFF;AAGVP,IAAAA,IAAI,EAAE,CAHI;AAIVI,IAAAA,KAAK,EAAG,SAJE;AAKVC,IAAAA,QAAQ,EAAG,EALD;AAMVC,IAAAA,SAAS,EAAG,MANF;AAOVO,IAAAA,gBAAgB,EAAG,KAPT;AAQVC,IAAAA,UAAU,EAAG;AARH;AAxBe,CAAlB,CAAf","sourcesContent":["import React from \"react\";\r\nimport {\r\n    Image,\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n    ScrollView,\r\n} from 'react-native'\r\n\r\nexport default class AboutApp extends React.Component{\r\n    render(){\r\n        return (\r\n            <View style={{backgroundColor: '#fff'}}>\r\n                <ScrollView style={styles.pageContainer}>\r\n                    <View style={styles.container}>\r\n                        <Text style={styles.newsTitle}>Taxi CALL</Text>\r\n                    </View>\r\n\r\n                    <View style={styles.container}>\r\n                        <Image source={require('../../../assets/splash1.png')} style={styles.newsPic} />\r\n                    </View>\r\n\r\n                    <View style={styles.container}>\r\n                        <Text style={styles.newsContent}>Taxi CALL is made by the company of Ant.\r\n                        To render multiple columns, use the numColumns prop. Using this approach instead of a flexWrap layout can prevent conflicts with the item height logic.\r\n                        By passing extraData=selected to FlatList we make sure FlatList itself will re-render when the state changes. Without setting this prop, FlatList would not know it needs to re-render any items because it is a PureComponent and the prop comparison will not show any changes.\r\n                        keyExtractor tells the list to use the ids for the react keys instead of the default key property.\r\n                        Internal state is not preserved when content scrolls out of the render window. Make sure all your data is captured in the item data or external stores like Flux, Redux, or Relay.\r\n                        This is a PureComponent which means that it will not re-render if props remain shallow-equal. Make sure that everything your renderItem function depends on is passed as a prop (e.g. extraData) that is not === after updates, otherwise your UI may not update on changes. This includes the data prop and parent component state.\r\n                        In order to constrain memory and enable smooth scrolling, content is rendered asynchronously offscreen. This means it's possible to scroll faster than the fill rate and momentarily see blank content. This is a tradeoff that can be adjusted to suit the needs of each application, and we are working on improving it behind the scenes.\r\n                        By default, the list looks for a key prop on each item and uses that for the React key. Alternatively, you can provide a custom keyExtractor prop.</Text>\r\n                    </View>\r\n                </ScrollView>\r\n            </View>\r\n        );\r\n    }\r\n}\r\nconst styles = StyleSheet.create({\r\n    pageContainer: {\r\n        \r\n    },\r\n    container: {\r\n        flex: 1,\r\n        flexDirection : 'row',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#ffffff',\r\n    },\r\n    newsTitle : {\r\n        color : '#4f4f4f',\r\n        fontSize : 18,\r\n        textAlign : 'left',\r\n        marginTop : 10,\r\n        marginBottom : 10,\r\n        fontWeight : 'bold'\r\n    },\r\n    newsPic : {\r\n        width : 180,\r\n        height : 120,\r\n        margin: 10,\r\n    },\r\n    newsContent : {\r\n        margin : 10,\r\n        marginTop : 10,\r\n        flex: 1,\r\n        color : '#4f4f4f',\r\n        fontSize : 16,\r\n        textAlign : 'left',\r\n        writingDirection : 'ltr',\r\n        lineHeight : 20\r\n    },\r\n});"]},"metadata":{},"sourceType":"module"}