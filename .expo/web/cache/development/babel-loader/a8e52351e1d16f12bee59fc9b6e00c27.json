{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\workspace\\\\Native\\\\TaxiCall\\\\src\\\\screens\\\\AuthLoading\\\\AuthLoadingScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar AuthLoadingScreen = function (_React$Component) {\n  _inherits(AuthLoadingScreen, _React$Component);\n\n  var _super = _createSuper(AuthLoadingScreen);\n\n  function AuthLoadingScreen(props) {\n    var _this;\n\n    _classCallCheck(this, AuthLoadingScreen);\n\n    _this = _super.call(this, props);\n\n    _this.props.navigation.navigate(\"Auth\");\n\n    return _this;\n  }\n\n  _createClass(AuthLoadingScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: {\n          backgroundColor: 'red'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      }, React.createElement(ActivityIndicator, {\n        size: \"large\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }), React.createElement(StatusBar, {\n        barStyle: \"default\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return AuthLoadingScreen;\n}(React.Component);\n\nexport { AuthLoadingScreen as default };","map":{"version":3,"sources":["E:/workspace/Native/TaxiCall/src/screens/AuthLoading/AuthLoadingScreen.js"],"names":["React","AsyncStorage","AuthLoadingScreen","props","navigation","navigate","backgroundColor","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;SAGEC,Y;;;;;IAKmBC,iB;;;;;AACnB,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AACA,UAAKA,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+B,MAA/B;;AAFiB;AAIlB;;;;WAmCD,kBAAS;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,eAAe,EAAE;AAAnB,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,SAAD;AAAW,QAAA,QAAQ,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAMD;;;;EA/C4CN,KAAK,CAACO,S;;SAAhCL,iB","sourcesContent":["import React from 'react';\r\nimport {\r\n  ActivityIndicator,\r\n  AsyncStorage,\r\n  StatusBar,\r\n  StyleSheet,\r\n  View,\r\n} from 'react-native';\r\nexport default class AuthLoadingScreen extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props.navigation.navigate(\"Auth\");\r\n    // this._bootstrapAsync();\r\n  }\r\n\r\n  // Fetch the token from storage then navigate to our appropriate place\r\n//   _bootstrapAsync = async () => {\r\n//     const userToken2 = await AsyncStorage.getItem('driverId');\r\n//     const userToken1 = await AsyncStorage.getItem('riderId');\r\n\r\n//     // This will switch to the App screen or Auth screen and this loading\r\n//     // screen will be unmounted and thrown away.\r\n//     /*if(AsyncStorage.getItem('riderId')==\"\"){\r\n//     this.props.navigation.navigate(userToken1 ?'App1':'Auth');\r\n//     }else{\r\n//     this.props.navigation.navigate(userToken2 ?'App2':'Auth');\r\n//     }*/\r\n//     var token;\r\n//     if (userToken1) {\r\n//       AsyncStorage.getItem('riderId')\r\n//         .then(\r\n//           result => (token = result),\r\n//           this.props.navigation.navigate(userToken1 ? 'App1' : 'Auth'),\r\n//         )\r\n//         .catch(e => console.log('err', e));\r\n//     } else {\r\n//       AsyncStorage.getItem('driverId')\r\n//         .then(\r\n//           result => (token = result),\r\n//           this.props.navigation.navigate(userToken2 ? 'App2' : 'Auth'),\r\n//         )\r\n//         .catch(e => console.log('err', e));\r\n//     }\r\n\r\n//     //this.props.navigation.navigate(userToken ?'App2':'Auth');\r\n//   };\r\n\r\n  // Render any loading content that you like here\r\n  render() {\r\n    return (\r\n      <View style={{ backgroundColor: 'red' }}>\r\n        <ActivityIndicator size=\"large\" />\r\n        <StatusBar barStyle=\"default\" />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}