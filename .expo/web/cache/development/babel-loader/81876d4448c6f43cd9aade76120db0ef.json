{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\workspace\\\\Native\\\\TaxiCall\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AppRegistry from \"react-native-web/dist/exports/AppRegistry\";\nimport { createStackNavigator } from 'react-navigation-stack';\nimport { createSwitchNavigator, createAppContainer } from \"react-navigation\";\nimport RiderDriverScreenChoice from \"./src/screens/ChoseRiderDriver/RiderDriverScreenChoice\";\nimport AuthLoadingScreen from \"./src/screens/AuthLoading/AuthLoadingScreen\";\nimport RiderRegLog from \"./src/screens/rider/RiderRegLog\";\nimport RiderRegister from \"./src/screens/rider/RiderRegister\";\nimport RiderLogin from \"./src/screens/rider/RiderLogin\";\nimport RiderHome from \"./src/screens/rider/RiderHome\";\nimport DriverRegLog from \"./src/screens/driver/DriverRegLog\";\nimport DriverLogin from \"./src/screens/driver/DriverLogin\";\nimport DriverRegister from \"./src/screens/driver/DriverRegister\";\nimport DriverHome from \"./src/screens/driver/DriverHome\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 9\n        }\n      });\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nvar AuthStack = createStackNavigator({\n  Home: RiderDriverScreenChoice,\n  RiderScreen: RiderRegLog,\n  RiderReg: RiderRegister,\n  RiderLog: RiderLogin,\n  DriverScreen: DriverRegLog,\n  DriverLog: DriverLogin,\n  DriverReg: DriverRegister\n});\nvar AuthStackRider = createStackNavigator({\n  Rider: RiderHome\n}, {\n  headerMode: 'none',\n  navigationOptions: {\n    header: null,\n    headerVisible: false\n  }\n});\nvar AuthStackDriver = createStackNavigator({\n  Driver: DriverHome\n}, {\n  headerMode: 'none',\n  navigationOptions: {\n    header: null,\n    headerVisible: false\n  }\n});\nvar switchNavigator = createSwitchNavigator({\n  AuthLoading: AuthLoadingScreen,\n  App1: AuthStackRider,\n  App2: AuthStackDriver,\n  Auth: AuthStack\n}, {\n  initialRouteName: 'AuthLoading'\n});\nvar AppContainer = createAppContainer(switchNavigator);\nexport default AppContainer;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#1E88E5'\n  }\n});","map":{"version":3,"sources":["E:/workspace/Native/TaxiCall/App.js"],"names":["React","createStackNavigator","createSwitchNavigator","createAppContainer","RiderDriverScreenChoice","AuthLoadingScreen","RiderRegLog","RiderRegister","RiderLogin","RiderHome","DriverRegLog","DriverLogin","DriverRegister","DriverHome","App","styles","container","Component","AuthStack","Home","RiderScreen","RiderReg","RiderLog","DriverScreen","DriverLog","DriverReg","AuthStackRider","Rider","headerMode","navigationOptions","header","headerVisible","AuthStackDriver","Driver","switchNavigator","AuthLoading","App1","App2","Auth","initialRouteName","AppContainer","StyleSheet","create","flex","backgroundColor"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAEA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,qBAAT,EAAgCC,kBAAhC,QAA0D,kBAA1D;AACA,OAAOC,uBAAP;AAEA,OAAOC,iBAAP;AACA,OAAOC,WAAP;AACA,OAAOC,aAAP;AACA,OAAOC,UAAP;AACA,OAAOC,SAAP;AAGA,OAAOC,YAAP;AACA,OAAOC,WAAP;AACA,OAAOC,cAAP;AACA,OAAOC,UAAP;;IAEMC,G;;;;;;;;;;;;;WACJ,kBAAQ;AACN,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGD;;;;EALehB,KAAK,CAACiB,S;;AAQxB,IAAMC,SAAS,GAAGjB,oBAAoB,CAAC;AACtCkB,EAAAA,IAAI,EAAEf,uBADgC;AAGtCgB,EAAAA,WAAW,EAAEd,WAHyB;AAItCe,EAAAA,QAAQ,EAAEd,aAJ4B;AAKtCe,EAAAA,QAAQ,EAAEd,UAL4B;AAStCe,EAAAA,YAAY,EAAEb,YATwB;AAUtCc,EAAAA,SAAS,EAAEb,WAV2B;AAWtCc,EAAAA,SAAS,EAAEb;AAX2B,CAAD,CAAtC;AAcA,IAAMc,cAAc,GAAGzB,oBAAoB,CAAC;AAAE0B,EAAAA,KAAK,EAAElB;AAAT,CAAD,EAAuB;AAC9DmB,EAAAA,UAAU,EAAE,MADkD;AAE9DC,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,MAAM,EAAE,IADS;AAEjBC,IAAAA,aAAa,EAAE;AAFE;AAF2C,CAAvB,CAA3C;AAOA,IAAMC,eAAe,GAAG/B,oBAAoB,CAAC;AAAEgC,EAAAA,MAAM,EAAEpB;AAAV,CAAD,EAAyB;AACpEe,EAAAA,UAAU,EAAE,MADwD;AAEpEC,EAAAA,iBAAiB,EAAE;AACnBC,IAAAA,MAAM,EAAE,IADW;AAEnBC,IAAAA,aAAa,EAAE;AAFI;AAFiD,CAAzB,CAA5C;AAMA,IAAMG,eAAe,GAAGhC,qBAAqB,CAC5C;AACCiC,EAAAA,WAAW,EAAE9B,iBADd;AAEC+B,EAAAA,IAAI,EAAEV,cAFP;AAGCW,EAAAA,IAAI,EAAEL,eAHP;AAICM,EAAAA,IAAI,EAAEpB;AAJP,CAD4C,EAO5C;AACCqB,EAAAA,gBAAgB,EAAE;AADnB,CAP4C,CAA7C;AAYA,IAAMC,YAAY,GAAGrC,kBAAkB,CAAC+B,eAAD,CAAvC;AACA,eAAeM,YAAf;AAEA,IAAMzB,MAAM,GAAG0B,UAAU,CAACC,MAAX,CAAkB;AAChC1B,EAAAA,SAAS,EAAE;AACV2B,IAAAA,IAAI,EAAE,CADI;AAEVC,IAAAA,eAAe,EAAE;AAFP;AADqB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View, AppRegistry } from 'react-native';\nimport { createStackNavigator } from 'react-navigation-stack';\nimport { createSwitchNavigator, createAppContainer } from \"react-navigation\";\nimport RiderDriverScreenChoice from \"./src/screens/ChoseRiderDriver/RiderDriverScreenChoice\";\n\nimport AuthLoadingScreen from \"./src/screens/AuthLoading/AuthLoadingScreen\";\nimport RiderRegLog from './src/screens/rider/RiderRegLog';\nimport RiderRegister from './src/screens/rider/RiderRegister';\nimport RiderLogin from './src/screens/rider/RiderLogin';\nimport RiderHome from './src/screens/rider/RiderHome';\n// import RiderVerifyNumber from './src/screens/rider/RiderVerifyNumber';\n// import RiderForgotPassword from './src/screens/rider/RiderForgotPassword'\nimport DriverRegLog from \"./src/screens/driver/DriverRegLog\";\nimport DriverLogin from \"./src/screens/driver/DriverLogin\";\nimport DriverRegister from \"./src/screens/driver/DriverRegister\";\nimport DriverHome from './src/screens/driver/DriverHome';\n\nclass App extends React.Component {\n  render(){\n    return (\n        <View style={styles.container} />\n    );\n  }\n}\n\nconst AuthStack = createStackNavigator({\n\tHome: RiderDriverScreenChoice,\n\t//rider\n\tRiderScreen: RiderRegLog,\n\tRiderReg: RiderRegister,\n\tRiderLog: RiderLogin,\n\t// RiderVerifyNum: RiderVerifyNumber,\n\t// RiderResetPassWord: RiderForgotPassword,\n\t// //driver\n\tDriverScreen: DriverRegLog,\n\tDriverLog: DriverLogin,\n\tDriverReg: DriverRegister\n});\n\nconst AuthStackRider = createStackNavigator({ Rider: RiderHome }, {\n    headerMode: 'none',\n    navigationOptions: {\n      header: null,\n      headerVisible: false,\n    },\n  },);\nconst AuthStackDriver = createStackNavigator({ Driver: DriverHome }, { \n\theaderMode: 'none',\n\tnavigationOptions: {\n\theader: null,\n\theaderVisible: false,\n\t},});\nconst switchNavigator = createSwitchNavigator(\n\t{\n\t\tAuthLoading: AuthLoadingScreen,\n\t\tApp1: AuthStackRider,\n\t\tApp2: AuthStackDriver,\n\t\tAuth: AuthStack\n\t},\n\t{\n\t\tinitialRouteName: 'AuthLoading'\n\t}\n);\n\nconst AppContainer = createAppContainer(switchNavigator);\nexport default AppContainer;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#1E88E5'\n\t}\n});"]},"metadata":{},"sourceType":"module"}