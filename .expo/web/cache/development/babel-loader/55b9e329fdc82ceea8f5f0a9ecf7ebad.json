{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _jsxFileName = \"E:\\\\workspace\\\\Native\\\\TaxiCall\\\\src\\\\screens\\\\rider\\\\RiderPickUp.js\",\n    _this3 = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { createDrawerNavigator } from \"react-native-web/dist/index\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport { Content, Container, Header, Left, Icon, Footer, Body, Card, CardItem } from 'native-base';\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport Toast from 'react-native-simple-toast';\nvar homePlace = {\n  description: 'Home',\n  geometry: {\n    location: {\n      lat: 48.8152937,\n      lng: 2.4597668\n    }\n  }\n};\nvar workPlace = {\n  description: 'Work',\n  geometry: {\n    location: {\n      lat: 48.8496818,\n      lng: 2.2940881\n    }\n  }\n};\n\nvar RiderPickUp = function (_React$Component) {\n  _inherits(RiderPickUp, _React$Component);\n\n  var _super = _createSuper(RiderPickUp);\n\n  function RiderPickUp(props) {\n    var _this;\n\n    _classCallCheck(this, RiderPickUp);\n\n    _this = _super.call(this, props);\n\n    _this._validatePickUpAndDropOffLocations = function () {\n      if (GooglePlacesInput.pickupName == null || GooglePlacesInput.pickupLatitude == null || GooglePlacesInput.pickupLongitude == null) {\n        Toast.show('SET YOUR PICK UP LOCATION PLEASE', Toast.SHORT, Toast.TOP);\n        return;\n      }\n\n      if (GooglePlacesDropOff.dropOffName == null || GooglePlacesDropOff.dropOffLatitude == null || GooglePlacesDropOff.dropOffLongitude == null) {\n        Toast.show('SET YOUR DROP OFF LOCATION PLEASE', Toast.SHORT, Toast.TOP);\n        return;\n      }\n\n      Toast.show('Good', Toast.SHORT, Toast.TOP);\n\n      _this._getNearbyDrivers();\n    };\n\n    _this._getNearbyDrivers = function () {\n      var DriverKeys = [];\n      var counts = [];\n      var randomIndex;\n      var urlRef = firebase.database().ref('/Drivers/');\n      urlRef.once('value', function (snapshot) {\n        snapshot.forEach(function (child) {\n          DriverKeys.push(child.key);\n        });\n\n        for (i = 0; i < DriverKeys.length; i++) {\n          counts.push(DriverKeys[i]);\n        }\n\n        randomIndex = Math.floor(Math.random() * DriverKeys.length);\n\n        _this._requestDriver(counts[randomIndex]);\n      });\n    };\n\n    _this._requestDriver = function (driverID) {};\n\n    return _this;\n  }\n\n  _createClass(RiderPickUp, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Container, {\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }\n      }, React.createElement(Header, {\n        style: {\n          backgroundColor: '#42A5F5',\n          height: 60\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }\n      }, React.createElement(Left, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }, React.createElement(TouchableHighlight, {\n        style: {\n          width: 50,\n          height: 50,\n          borderRadius: 50,\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        onPress: function onPress() {\n          return _this2.props.navigation.navigate('Main');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }\n      }, React.createElement(Icon, {\n        name: \"arrow-back\",\n        style: {\n          color: '#ffffff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }\n      }))), React.createElement(Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: '#ffffff',\n          fontSize: 20,\n          fontWeight: 'bold'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      }, \"Locations\"))), React.createElement(KeyboardAvoidingView, {\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }\n      }, React.createElement(Content, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: {\n          width: 400,\n          minHeight: 120,\n          maxHeight: 120\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }, React.createElement(GooglePlacesInput, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }\n      })), React.createElement(View, {\n        style: {\n          width: 400,\n          minHeight: 120,\n          maxHeight: 120\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }, React.createElement(GooglePlacesDropOff, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }\n      })), React.createElement(TouchableOpacity, {\n        style: styles.bookButton,\n        onPress: this._validatePickUpAndDropOffLocations,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: '#ffffff',\n          fontWeight: 'bold'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }\n      }, \"REQUEST\")))));\n    }\n  }]);\n\n  return RiderPickUp;\n}(React.Component);\n\nRiderPickUp.navigationOptions = {};\nexport { RiderPickUp as default };\nvar styles = StyleSheet.create({\n  containerView: {\n    flex: 1,\n    backgroundColor: '#ffffff'\n  },\n  map: {\n    height: 600,\n    marginTop: 0\n  },\n  searchIcon: {\n    marginTop: 8,\n    marginLeft: 8\n  },\n  bookButton: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#42A5F5',\n    height: 50,\n    width: 350,\n    marginLeft: 5\n  }\n});\n\nvar GooglePlacesInput = function GooglePlacesInput() {\n  return React.createElement(GooglePlacesAutocomplete, {\n    placeholder: \"Pick Up Location\",\n    minLength: 2,\n    autoFocus: true,\n    returnKeyType: 'search',\n    listViewDisplayed: \"auto\",\n    fetchDetails: true,\n    renderDescription: function renderDescription(row) {\n      return row.description;\n    },\n    onPress: function onPress(data) {\n      var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      console.log(data, details);\n      pickupName = data.description, pickupLatitude = \"\" + details.geometry.location.lat, pickupLongitude = \"\" + details.geometry.location.lng, GooglePlacesInput.pickupLatitude = pickupLatitude, GooglePlacesInput.pickupName = pickupName, GooglePlacesInput.pickupLongitude = pickupLongitude;\n    },\n    getDefaultValue: function getDefaultValue() {\n      return '';\n    },\n    query: {\n      key: 'AIzaSyANWRmdcfG4hksdtmVYxnqKCIsfW__rsVY',\n      language: 'en',\n      types: 'geocode'\n    },\n    styles: {\n      textInputContainer: {\n        width: '100%',\n        backgroundColor: '#ffffff'\n      },\n      description: {\n        fontWeight: 'bold'\n      },\n      predefinedPlacesDescription: {\n        color: '#ffffff',\n        height: 30\n      }\n    },\n    currentLocation: true,\n    currentLocationLabel: \"Current location\",\n    nearbyPlacesAPI: \"GooglePlacesSearch\",\n    GoogleReverseGeocodingQuery: {},\n    GooglePlacesSearchQuery: {\n      rankby: 'distance',\n      types: 'food'\n    },\n    filterReverseGeocodingByTypes: ['locality', 'administrative_area_level_3'],\n    debounce: 200,\n    renderLeftButton: function renderLeftButton() {\n      return React.createElement(Image, {\n        style: {\n          width: 25,\n          height: 25,\n          marginTop: 10,\n          marginLeft: 15\n        },\n        source: require(\"../Images/pickup.png\"),\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 9\n        }\n      });\n    },\n    renderRightButton: function renderRightButton() {\n      return React.createElement(Text, {\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 32\n        }\n      });\n    },\n    __self: _this3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 5\n    }\n  });\n};\n\nvar GooglePlacesDropOff = function GooglePlacesDropOff() {\n  return React.createElement(GooglePlacesAutocomplete, {\n    placeholder: \"Drop Off Location\",\n    minLength: 2,\n    autoFocus: false,\n    returnKeyType: 'search',\n    listViewDisplayed: \"auto\",\n    fetchDetails: true,\n    renderDescription: function renderDescription(row) {\n      return row.description;\n    },\n    onPress: function onPress(data) {\n      var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      dropOffName = data.description, dropOffLatitude = \"\" + details.geometry.location.lat, dropOffLongitude = \"\" + details.geometry.location.lng, GooglePlacesDropOff.dropOffLatitude = dropOffLatitude, GooglePlacesDropOff.dropOffName = dropOffName, GooglePlacesDropOff.dropOffLongitude = dropOffLongitude;\n    },\n    getDefaultValue: function getDefaultValue() {\n      return '';\n    },\n    query: {\n      key: 'AIzaSyANWRmdcfG4hksdtmVYxnqKCIsfW__rsVY',\n      language: 'en',\n      types: 'geocode'\n    },\n    styles: {\n      textInputContainer: {\n        width: '100%',\n        backgroundColor: '#ffffff'\n      },\n      description: {\n        fontWeight: 'bold'\n      },\n      predefinedPlacesDescription: {\n        color: '#ffffff'\n      }\n    },\n    currentLocation: true,\n    currentLocationLabel: \"Current location\",\n    nearbyPlacesAPI: \"GooglePlacesSearch\",\n    GoogleReverseGeocodingQuery: {},\n    GooglePlacesSearchQuery: {\n      rankby: 'distance',\n      types: 'food'\n    },\n    filterReverseGeocodingByTypes: ['locality', 'administrative_area_level_3'],\n    debounce: 200,\n    renderLeftButton: function renderLeftButton() {\n      return React.createElement(Image, {\n        style: {\n          width: 25,\n          height: 25,\n          marginTop: 10,\n          marginLeft: 15\n        },\n        source: require(\"../Images/dropoff.png\"),\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 9\n        }\n      });\n    },\n    renderRightButton: function renderRightButton() {\n      return React.createElement(Text, {\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 32\n        }\n      });\n    },\n    __self: _this3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["E:/workspace/Native/TaxiCall/src/screens/rider/RiderPickUp.js"],"names":["React","AsyncStorage","createDrawerNavigator","Content","Container","Header","Left","Icon","Footer","Body","Card","CardItem","GooglePlacesAutocomplete","Toast","homePlace","description","geometry","location","lat","lng","workPlace","RiderPickUp","props","_validatePickUpAndDropOffLocations","GooglePlacesInput","pickupName","pickupLatitude","pickupLongitude","show","SHORT","TOP","GooglePlacesDropOff","dropOffName","dropOffLatitude","dropOffLongitude","_getNearbyDrivers","DriverKeys","counts","randomIndex","urlRef","firebase","database","ref","once","snapshot","forEach","child","push","key","i","length","Math","floor","random","_requestDriver","driverID","flex","backgroundColor","height","width","borderRadius","alignItems","justifyContent","navigation","navigate","color","fontSize","fontWeight","minHeight","maxHeight","styles","bookButton","Component","navigationOptions","StyleSheet","create","containerView","map","marginTop","searchIcon","marginLeft","row","data","details","console","log","language","types","textInputContainer","predefinedPlacesDescription","rankby","require"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  Button,\r\n  AsyncStorage,\r\n  createDrawerNavigator,\r\n  TouchableOpacity,\r\n  Image,\r\n  TouchableHighlight,\r\n  KeyboardAvoidingView,\r\n} from 'react-native';\r\nimport {\r\n  Content,\r\n  Container,\r\n  Header,\r\n  Left,\r\n  Icon,\r\n  Footer,\r\n  Body,\r\n  Card,\r\n  CardItem,\r\n} from 'native-base';\r\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\r\nimport Toast from 'react-native-simple-toast';\r\n// import * as firebase from 'firebase';\r\n// import ApiKeys from '../constants/ApiKeys';\r\nconst homePlace = {\r\n  description: 'Home',\r\n  geometry: { location: { lat: 48.8152937, lng: 2.4597668 } },\r\n};\r\nconst workPlace = {\r\n  description: 'Work',\r\n  geometry: { location: { lat: 48.8496818, lng: 2.2940881 } },\r\n};\r\nexport default class RiderPickUp extends React.Component {\r\n  static navigationOptions = {};\r\n  //=====================================================================================================================\r\n  //to make these variblas class mebers and be accessible everywhere\r\n  static pickupName;\r\n  static pickupLatitude;\r\n  static pickupLongitude;\r\n  //dropOff data\r\n  static dropOffName;\r\n  static dropOffLatitude;\r\n  static dropOffLongitude;\r\n\r\n  //=====================================================================================================================\r\n  constructor(props) {\r\n    super(props);\r\n    // if (!firebase.apps.length) {\r\n    //   firebase.initializeApp(ApiKeys.FirebaseConfig);\r\n    // }\r\n  }\r\n  render() {\r\n    return (\r\n      <Container style={{ flex: 1 }}>\r\n        <Header style={{ backgroundColor: '#42A5F5', height: 60 }}>\r\n          <Left>\r\n            <TouchableHighlight\r\n              style={{\r\n                width: 50,\r\n                height: 50,\r\n                borderRadius: 50,\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n              }}\r\n              onPress={() => this.props.navigation.navigate('Main')}\r\n            >\r\n              <Icon name=\"arrow-back\" style={{ color: '#ffffff' }} />\r\n            </TouchableHighlight>\r\n          </Left>\r\n          <Body>\r\n            <Text\r\n              style={{\r\n                color: '#ffffff',\r\n                fontSize: 20,\r\n                fontWeight: 'bold',\r\n              }}\r\n            >\r\n              Locations\r\n            </Text>\r\n          </Body>\r\n        </Header>\r\n        <KeyboardAvoidingView style={{ flex: 1 }}>\r\n          <Content>\r\n            <View style={{ width: 400, minHeight: 120, maxHeight: 120 }}>\r\n              <GooglePlacesInput />\r\n            </View>\r\n            <View style={{ width: 400, minHeight: 120, maxHeight: 120 }}>\r\n              <GooglePlacesDropOff />\r\n            </View>\r\n            <TouchableOpacity\r\n              style={styles.bookButton}\r\n              onPress={this._validatePickUpAndDropOffLocations}\r\n            >\r\n              <Text style={{ color: '#ffffff', fontWeight: 'bold' }}>\r\n                REQUEST\r\n              </Text>\r\n            </TouchableOpacity>\r\n          </Content>\r\n        </KeyboardAvoidingView>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  //validate the google places auto complete\r\n\r\n  //====================================================================================================================\r\n  _validatePickUpAndDropOffLocations = () => {\r\n    // alert(\"good\"+GooglePlacesInput.pickupLatitude);\r\n    if (\r\n      GooglePlacesInput.pickupName == null ||\r\n      GooglePlacesInput.pickupLatitude == null ||\r\n      GooglePlacesInput.pickupLongitude == null\r\n    ) {\r\n      Toast.show('SET YOUR PICK UP LOCATION PLEASE', Toast.SHORT, Toast.TOP);\r\n      return;\r\n    }\r\n    if (\r\n      GooglePlacesDropOff.dropOffName == null ||\r\n      GooglePlacesDropOff.dropOffLatitude == null ||\r\n      GooglePlacesDropOff.dropOffLongitude == null\r\n    ) {\r\n      Toast.show('SET YOUR DROP OFF LOCATION PLEASE', Toast.SHORT, Toast.TOP);\r\n      return;\r\n    }\r\n    Toast.show('Good', Toast.SHORT, Toast.TOP);\r\n    this._getNearbyDrivers();\r\n  };\r\n  //====================================================================================================================\r\n\r\n  //GET NEARBY DRIVERS\r\n  //====================================================================================================================\r\n  _getNearbyDrivers = () => {\r\n    var DriverKeys = [];\r\n    var counts = [];\r\n    var randomIndex;\r\n    var urlRef = firebase.database().ref('/Drivers/');\r\n    urlRef.once('value', snapshot => {\r\n      snapshot.forEach(function (child) {\r\n        //console.log(\"keys\"+child.key);\r\n        DriverKeys.push(child.key);\r\n      });\r\n      for (i = 0; i < DriverKeys.length; i++) {\r\n        counts.push(DriverKeys[i]);\r\n      }\r\n\r\n      randomIndex = Math.floor(Math.random() * DriverKeys.length);\r\n      //console.log(counts[randomIndex]);\r\n\r\n      //request the driver\r\n\r\n      this._requestDriver(counts[randomIndex]);\r\n    });\r\n  };\r\n  //=======================================================================================================================\r\n  /* \r\n    REQUEST DRIVERS \r\n  */\r\n  _requestDriver = driverID => {\r\n    /*firebase.database().ref('/Ride_Request/' +driverID).once('value').then(function(snapshot) {\r\n          \r\n          if(snapshot.exists()){\r\n            Toast.show(\"This driver is busy,Try another one\",Toast.SHORT);\r\n            return;\r\n          }\r\n          \r\n         \r\n          \r\n          }).then(()=>{\r\n            \r\n          },(error)=>{\r\n            console.error(\"error\"+error);\r\n            //console.log(\"the user id:\"+userId);\r\n          });\r\n  */\r\n    //store rider informations\r\n    // AsyncStorage.getItem('riderId')\r\n    //   .then(riderID =>\r\n    //     //riderId=result,\r\n\r\n    //     firebase\r\n    //       .database()\r\n    //       .ref('Ride_Request/' + riderID)\r\n    //       .set({\r\n    //         driverID: driverID,\r\n    //       })\r\n    //       .then(\r\n    //         () => {\r\n    //           Toast.show('driver requested successful', Toast.SHORT);\r\n    //         },\r\n    //         error => {\r\n    //           Toast.show(error.message, Toast.SHORT);\r\n    //         },\r\n    //       ),\r\n    //   )\r\n    //   .catch(e => console.log('err', e));\r\n\r\n    //store driver information\r\n    // AsyncStorage.getItem('riderId')\r\n    //   .then(riderID =>\r\n    //     //riderId=result,\r\n\r\n    //     firebase\r\n    //       .database()\r\n    //       .ref('Ride_Request/' + driverID + '/')\r\n    //       .set({\r\n    //         riderID: riderID,\r\n    //         pickUpName: GooglePlacesInput.pickupName,\r\n    //         dropOffName: GooglePlacesDropOff.dropOffName,\r\n    //         pickupLatitude: GooglePlacesInput.pickupLatitude,\r\n    //         pickupLongitude: GooglePlacesInput.pickupLongitude,\r\n    //         dropOffLatitude: GooglePlacesDropOff.dropOffLatitude,\r\n    //         dropOffLongitude: GooglePlacesDropOff.dropOffLongitude,\r\n    //       })\r\n    //       .then(\r\n    //         () => {},\r\n    //         error => {\r\n    //           //Toast.show(error.message,Toast.SHORT);\r\n    //           console.error('error:' + error);\r\n    //         },\r\n    //       ),\r\n    //   )\r\n    //   .catch(e => console.log('err', e));\r\n  };\r\n}\r\n\r\n//==========================================================================================================================\r\nconst styles = StyleSheet.create({\r\n  containerView: {\r\n    flex: 1,\r\n    backgroundColor: '#ffffff',\r\n  },\r\n  map: {\r\n    height: 600,\r\n    marginTop: 0,\r\n  },\r\n  searchIcon: {\r\n    marginTop: 8,\r\n    marginLeft: 8,\r\n  },\r\n  bookButton: {\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    backgroundColor: '#42A5F5',\r\n    height: 50,\r\n    width: 350,\r\n    marginLeft: 5,\r\n  },\r\n});\r\n\r\n//===========================================================================================================================\r\nconst GooglePlacesInput = () => {\r\n  return (\r\n    <GooglePlacesAutocomplete\r\n      placeholder=\"Pick Up Location\"\r\n      minLength={2}\r\n      autoFocus={true}\r\n      returnKeyType={'search'}\r\n      listViewDisplayed=\"auto\"\r\n      fetchDetails={true}\r\n      renderDescription={row => row.description}\r\n      onPress={(data, details = null) => {\r\n        console.log(data, details);\r\n        //set pick up data from google auto complete\r\n        (pickupName = data.description), // selected address\r\n          (pickupLatitude = `${details.geometry.location.lat}`),\r\n          (pickupLongitude = `${details.geometry.location.lng}`),\r\n          //storing data\r\n          (GooglePlacesInput.pickupLatitude = pickupLatitude),\r\n          (GooglePlacesInput.pickupName = pickupName),\r\n          (GooglePlacesInput.pickupLongitude = pickupLongitude);\r\n      }}\r\n      getDefaultValue={() => ''}\r\n      query={{\r\n        key: 'AIzaSyANWRmdcfG4hksdtmVYxnqKCIsfW__rsVY',\r\n        language: 'en',\r\n        types: 'geocode',\r\n      }}\r\n      styles={{\r\n        textInputContainer: {\r\n          width: '100%',\r\n          backgroundColor: '#ffffff',\r\n        },\r\n        description: {\r\n          fontWeight: 'bold',\r\n        },\r\n        predefinedPlacesDescription: {\r\n          color: '#ffffff',\r\n          height: 30,\r\n        },\r\n      }}\r\n      currentLocation={true}\r\n      currentLocationLabel=\"Current location\"\r\n      nearbyPlacesAPI=\"GooglePlacesSearch\"\r\n      GoogleReverseGeocodingQuery={{}}\r\n      GooglePlacesSearchQuery={{\r\n        rankby: 'distance',\r\n        types: 'food',\r\n      }}\r\n      filterReverseGeocodingByTypes={[\r\n        'locality',\r\n        'administrative_area_level_3',\r\n      ]} // filter the reverse geocoding results by types - ['locality', 'administrative_area_level_3'] if you want to display only cities\r\n      /*predefinedPlaces={[homePlace, workPlace]}*/\r\n\r\n      debounce={200}\r\n      renderLeftButton={() => (\r\n        <Image\r\n          style={{ width: 25, height: 25, marginTop: 10, marginLeft: 15 }}\r\n          source={require('../Images/pickup.png')}\r\n        />\r\n      )}\r\n      renderRightButton={() => <Text />}\r\n    />\r\n  );\r\n};\r\n\r\n//===========================================================================================================================\r\nconst GooglePlacesDropOff = () => {\r\n  return (\r\n    <GooglePlacesAutocomplete\r\n      placeholder=\"Drop Off Location\"\r\n      minLength={2}\r\n      autoFocus={false}\r\n      returnKeyType={'search'}\r\n      listViewDisplayed=\"auto\"\r\n      fetchDetails={true}\r\n      renderDescription={row => row.description}\r\n      onPress={(data, details = null) => {\r\n        //console.log(data, details);\r\n        //set drop off data from google auto complete\r\n\r\n        (dropOffName = data.description), // selected address\r\n          (dropOffLatitude = `${details.geometry.location.lat}`),\r\n          (dropOffLongitude = `${details.geometry.location.lng}`),\r\n          //storing data\r\n          (GooglePlacesDropOff.dropOffLatitude = dropOffLatitude),\r\n          (GooglePlacesDropOff.dropOffName = dropOffName),\r\n          (GooglePlacesDropOff.dropOffLongitude = dropOffLongitude);\r\n      }}\r\n      getDefaultValue={() => ''}\r\n      query={{\r\n        key: 'AIzaSyANWRmdcfG4hksdtmVYxnqKCIsfW__rsVY',\r\n        language: 'en',\r\n        types: 'geocode',\r\n      }}\r\n      styles={{\r\n        textInputContainer: {\r\n          width: '100%',\r\n          backgroundColor: '#ffffff',\r\n        },\r\n        description: {\r\n          fontWeight: 'bold',\r\n        },\r\n        predefinedPlacesDescription: {\r\n          color: '#ffffff',\r\n        },\r\n      }}\r\n      currentLocation={true}\r\n      currentLocationLabel=\"Current location\"\r\n      nearbyPlacesAPI=\"GooglePlacesSearch\"\r\n      GoogleReverseGeocodingQuery={{}}\r\n      GooglePlacesSearchQuery={{\r\n        rankby: 'distance',\r\n        types: 'food',\r\n      }}\r\n      filterReverseGeocodingByTypes={[\r\n        'locality',\r\n        'administrative_area_level_3',\r\n      ]} // filter the reverse geocoding results by types - ['locality', 'administrative_area_level_3'] if you want to display only cities\r\n      /*predefinedPlaces={[homePlace, workPlace]}*/\r\n\r\n      debounce={200}\r\n      renderLeftButton={() => (\r\n        <Image\r\n          style={{ width: 25, height: 25, marginTop: 10, marginLeft: 15 }}\r\n          source={require('../Images/dropoff.png')}\r\n        />\r\n      )}\r\n      renderRightButton={() => <Text />}\r\n    />\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}