{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toArray from \"@babel/runtime/helpers/toArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport qs from 'query-string';\nimport debounce from 'lodash/debounce';\nvar YandexMapKit = NativeModules.RNYandexMapKit;\nvar GEOCODE_BASE_URL = 'https://geocode-maps.yandex.ru/1.x/?';\n\nfunction requestGeocoding(geocode, options, apikey) {\n  var query = _objectSpread(_objectSpread({\n    geocode: geocode\n  }, options), {}, {\n    format: 'json'\n  });\n\n  if (apikey !== undefined) query.apikey = apikey;\n  var url = GEOCODE_BASE_URL + qs.stringify(query);\n  return fetch(url).then(function (response) {\n    return response.json();\n  });\n}\n\nfunction makeDebouncedGeocoding(options, onComplete, apiKey) {\n  var debounceWait = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 150;\n\n  var apiCall = function apiCall(geocode) {\n    requestGeocoding(geocode, options, apiKey).then(function (json) {\n      if (json.error) {\n        console.warn('Yandex geocoding api error: ' + json.error);\n      } else if (onComplete) {\n        var _json$response$GeoObj = _toArray(json.response.GeoObjectCollection.featureMember),\n            firstFound = _json$response$GeoObj[0],\n            rest = _json$response$GeoObj.slice(1);\n\n        var androidCompatibleResult;\n\n        if (firstFound) {\n          var _firstFound$GeoObject = firstFound.GeoObject.Point.pos.split(' '),\n              _firstFound$GeoObject2 = _slicedToArray(_firstFound$GeoObject, 2),\n              lon = _firstFound$GeoObject2[0],\n              lat = _firstFound$GeoObject2[1];\n\n          var title = firstFound.GeoObject.name;\n          var subtitle = firstFound.GeoObject.description;\n          var kind = firstFound.GeoObject.metaDataProperty.GeocoderMetaData.kind;\n          androidCompatibleResult = {\n            displayName: subtitle + ', ' + title,\n            kind: kind,\n            title: title,\n            subtitle: subtitle,\n            point: {\n              latitude: lat,\n              longitude: lon\n            }\n          };\n        }\n\n        onComplete(androidCompatibleResult, json);\n      }\n    }).catch(function (error) {\n      return console.warn('Yandex geocoding api error: ' + error);\n    });\n  };\n\n  if (options.hasOwnProperty('sco') || options.hasOwnProperty('kind')) {\n    return debounce(function (latitude, longitude) {\n      return apiCall(latitude + \",\" + longitude);\n    }, debounceWait);\n  } else {\n    return debounce(apiCall, debounceWait);\n  }\n}\n\nmodule.exports = {\n  setApiKey: function setApiKey(apiKey) {\n    return YandexMapKit.setApiKey(apiKey);\n  },\n  requestGeocoding: requestGeocoding,\n  makeDebouncedGeocoding: makeDebouncedGeocoding\n};","map":{"version":3,"sources":["E:/workspace/Theme/Native/recipes-app-react-native/node_modules/react-native-yandexmapkit/src/YandexMapKit.js"],"names":["qs","debounce","YandexMapKit","NativeModules","RNYandexMapKit","GEOCODE_BASE_URL","requestGeocoding","geocode","options","apikey","query","format","undefined","url","stringify","fetch","then","response","json","makeDebouncedGeocoding","onComplete","apiKey","debounceWait","apiCall","error","console","warn","GeoObjectCollection","featureMember","firstFound","rest","androidCompatibleResult","GeoObject","Point","pos","split","lon","lat","title","name","subtitle","description","kind","metaDataProperty","GeocoderMetaData","displayName","point","latitude","longitude","catch","hasOwnProperty","module","exports","setApiKey"],"mappings":"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","sourcesContent":["import { NativeModules } from 'react-native';\nimport qs from 'query-string';\nimport debounce from 'lodash/debounce';\n\nconst YandexMapKit = NativeModules.RNYandexMapKit;\nconst GEOCODE_BASE_URL = 'https://geocode-maps.yandex.ru/1.x/?';\n\nfunction requestGeocoding(geocode, options, apikey) {\n  const query = { geocode, ...options, format: 'json' };\n  if (apikey !== undefined)\n    query.apikey = apikey;\n  const url = GEOCODE_BASE_URL + qs.stringify(query);\n  return fetch(url)\n    .then(response => response.json());\n}\n\nfunction makeDebouncedGeocoding(options, onComplete, apiKey, debounceWait = 150) {\n  const apiCall = (geocode) => {\n    requestGeocoding(geocode, options, apiKey)\n      .then(json => {\n        if (json.error) {\n          console.warn('Yandex geocoding api error: ' + json.error);\n        }\n        else if (onComplete) {\n          //Provide full web geocoding response as second argument\n          //First argument is extracted from the response to match Android native geocoding response\n          const {featureMember: [firstFound, ...rest]} = json.response.GeoObjectCollection;\n          let androidCompatibleResult;\n          if (firstFound) {\n            const [lon, lat] = firstFound.GeoObject.Point.pos.split(' ');\n            const title = firstFound.GeoObject.name;\n            const subtitle = firstFound.GeoObject.description;\n            const kind = firstFound.GeoObject.metaDataProperty.GeocoderMetaData.kind;\n            androidCompatibleResult = {\n              displayName: subtitle + ', ' + title,\n              kind,\n              title,\n              subtitle,\n              point: {\n                latitude: lat,\n                longitude: lon,\n              },\n            };\n          }\n          onComplete(androidCompatibleResult, json);\n        }\n      })\n      .catch(error => console.warn('Yandex geocoding api error: ' + error));\n  };\n  if (options.hasOwnProperty('sco') || options.hasOwnProperty('kind')){\n    return debounce((latitude, longitude) => apiCall(`${latitude},${longitude}`), debounceWait);\n  } \n  else {\n    return debounce(apiCall, debounceWait);\n  }\n}\n\nmodule.exports = {\n  setApiKey: apiKey => YandexMapKit.setApiKey(apiKey),\n  requestGeocoding,\n  makeDebouncedGeocoding,\n}"]},"metadata":{},"sourceType":"module"}